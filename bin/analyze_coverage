#!/usr/bin/env ruby
# frozen_string_literal: true

# Script to analyze test coverage and identify uncovered lines
# Usage: bin/analyze_coverage [--verbose]

require 'json'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: bin/analyze_coverage [options]"
  
  opts.on("-v", "--verbose", "Show all uncovered lines with context") do
    options[:verbose] = true
  end
  
  opts.on("-s", "--summary", "Show summary only") do
    options[:summary] = true
  end
  
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

coverage_file = File.join(File.dirname(__FILE__), '..', 'coverage', '.resultset.json')

unless File.exist?(coverage_file)
  puts "Error: Coverage file not found at #{coverage_file}"
  puts "Run 'bundle exec rspec' first to generate coverage data"
  exit 1
end

data = JSON.parse(File.read(coverage_file))
rspec_coverage = data['RSpec']['coverage']

total_lines = 0
covered_lines = 0
uncovered_by_file = {}

rspec_coverage.each do |file, coverage|
  next unless file.include?('/lib/')  # Only analyze lib files
  
  lines = coverage['lines']
  source_lines = File.readlines(file)
  file_uncovered = []
  
  lines.each_with_index do |hits, index|
    line_num = index + 1
    
    # nil means not executable (comments, blank lines, etc)
    next if hits.nil?
    
    total_lines += 1
    
    if hits > 0
      covered_lines += 1
    else
      file_uncovered << {
        line: line_num,
        code: source_lines[index].strip,
        context: options[:verbose] ? source_lines[[0, index-1].max...[source_lines.length, index+2].min] : nil
      }
    end
  end
  
  uncovered_by_file[file] = file_uncovered unless file_uncovered.empty?
end

coverage_percent = (covered_lines.to_f / total_lines * 100).round(2)

puts "=" * 70
puts "COVERAGE ANALYSIS REPORT"
puts "=" * 70
puts
puts "Overall Coverage: #{coverage_percent}% (#{covered_lines}/#{total_lines} lines)"
puts

unless options[:summary]
  if uncovered_by_file.empty?
    puts "🎉 Congratulations! 100% code coverage achieved!"
  else
    puts "Uncovered Lines by File:"
    puts "-" * 70
    
    uncovered_by_file.each do |file, uncovered_lines|
      puts "\n📁 #{File.basename(file)} (#{uncovered_lines.count} uncovered lines)"
      puts "   Path: #{file}"
      puts
      
      uncovered_lines.each do |line_info|
        if options[:verbose]
          puts "   Line #{line_info[:line]}:"
          line_info[:context].each_with_index do |context_line, i|
            marker = i == 1 ? "❌" : "  "
            puts "     #{marker} #{context_line.rstrip}"
          end
          puts
        else
          puts "   Line #{line_info[:line].to_s.ljust(4)}: #{line_info[:code]}"
        end
      end
    end
    
    puts "\n" + "=" * 70
    puts "SUMMARY"
    puts "=" * 70
    
    # Group uncovered lines by category
    categories = {
      "Ruby version compatibility" => [],
      "URL loading" => [],
      "Error handling" => [],
      "Other" => []
    }
    
    uncovered_by_file.each do |file, lines|
      lines.each do |line_info|
        code = line_info[:code].downcase
        
        if code.include?("yaml.load") || code.include?("yaml.safe_load") || code.include?("respond_to?(:safe_load)")
          categories["Ruby version compatibility"] << line_info
        elsif code.include?("uri.open") || code.include?("open(source)")
          categories["URL loading"] << line_info
        elsif code.include?("raise") || code.include?("rescue") || code.include?("psych")
          categories["Error handling"] << line_info
        else
          categories["Other"] << line_info
        end
      end
    end
    
    categories.each do |category, lines|
      next if lines.empty?
      puts "\n#{category}: #{lines.count} lines"
      percentage = (lines.count.to_f / (total_lines - covered_lines) * 100).round(1)
      puts "  (#{percentage}% of uncovered code)"
    end
    
    puts "\n" + "=" * 70
    puts "To improve coverage:"
    puts "  • Add tests for URL loading with WebMock"
    puts "  • Test Ruby 2.x/3.0 compatibility paths"
    puts "  • Add edge case error scenarios"
    puts "  • Run: bundle exec rspec"
  end
end

puts "\nRun with --verbose to see context around uncovered lines"
puts "Run with --summary for overview only"