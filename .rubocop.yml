# RuboCop configuration for settingslogic gem
# A simple settings solution using YAML and singleton pattern

plugins:
  - rubocop-rspec
  - rubocop-performance

AllCops:
  NewCops: enable
  SuggestExtensions: false
  TargetRubyVersion: 2.7  # Minimum supported version
  Exclude:
    - 'vendor/**/*'
    - '.bundle/**/*'
    - 'node_modules/**/*'
    - 'pkg/**/*'
    - 'coverage/**/*'
    - '.git/**/*'
    - 'tmp/**/*'
    - 'bin/console'
    - 'bin/analyze_coverage'

# Style preferences for this library
Style/Documentation:
  Enabled: false  # The code is self-documenting

Style/FrozenStringLiteralComment:
  Enabled: true
  EnforcedStyle: always

Style/StringLiterals:
  EnforcedStyle: single_quotes
  ConsistentQuotesInMultiline: true

Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

# Allow hash syntax from older Ruby versions for compatibility
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

# This is a small library, metrics can be relaxed
Metrics/MethodLength:
  Max: 30
  Exclude:
    - 'Rakefile'  # Release tasks can be longer

Metrics/ClassLength:
  Max: 210  # Settingslogic is a complete settings solution in one class, including security fixes

Metrics/AbcSize:
  Max: 30

Metrics/CyclomaticComplexity:
  Max: 15

Metrics/PerceivedComplexity:
  Max: 15

Metrics/BlockLength:
  Exclude:
    - 'spec/**/*'
    - '*.gemspec'
    - 'Rakefile'

# Layout preferences
Layout/LineLength:
  Max: 120
  Exclude:
    - 'spec/**/*'
    - 'docs/**/*'

# Naming
Naming/FileName:
  Exclude:
    - 'lib/settingslogic.rb'  # Main file uses non-standard naming

Naming/MethodParameterName:
  MinNameLength: 2
  AllowedNames: [e, p, k, v]  # Common short names

# Security
Security/Eval:
  Exclude:
    - 'lib/settingslogic.rb'  # We use instance_eval safely with __FILE__ and __LINE__

# Compatibility with older Ruby versions
Style/SymbolArray:
  EnforcedStyle: brackets

Style/WordArray:
  EnforcedStyle: brackets

# RSpec configuration - we modernized to expect syntax
RSpec/ExampleLength:
  Max: 25  # Some integration tests need more lines

RSpec/MultipleExpectations:
  Max: 8  # Integration tests may need multiple expectations

RSpec/NestedGroups:
  Max: 4

RSpec/DescribeClass:
  Exclude:
    - 'spec/**/*_spec.rb'  # Our specs are organized by functionality

RSpec/SpecFilePathFormat:
  Enabled: false  # We organized specs by functionality, not class

RSpec/SpecFilePathSuffix:
  Enabled: false

RSpec/ExpectActual:
  Exclude:
    - 'spec/yaml_handling_spec.rb'  # Testing URL patterns is valid

# Performance cops are now in rubocop-performance gem
Performance/RegexpMatch:
  Enabled: true

Performance/StringReplacement:
  Enabled: true

# Lint cops
Lint/SuppressedException:
  Exclude:
    - 'lib/settingslogic.rb'  # We intentionally suppress some errors for backwards compatibility

Lint/MissingSuper:
  Exclude:
    - 'lib/settingslogic.rb'  # Hash doesn't need super in initialize

Lint/ReturnInVoidContext:
  Exclude:
    - 'lib/settingslogic.rb'  # Early return pattern in initialize

Lint/DuplicateBranch:
  Exclude:
    - 'lib/settingslogic.rb'  # Intentional fallback pattern

# Style cops additions
Style/MissingRespondToMissing:
  Exclude:
    - 'lib/settingslogic.rb'  # method_missing is used for dynamic settings

Style/DocumentDynamicEvalDefinition:
  Exclude:
    - 'lib/settingslogic.rb'  # Dynamic method generation is core functionality

Naming/PredicateMethod:
  Exclude:
    - 'lib/settingslogic.rb'  # git_status_clean? is intentional

# Gemspec
Gemspec/DevelopmentDependencies:
  Enabled: false  # We prefer keeping dev dependencies in gemspec